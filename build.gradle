apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'net.luminis.networking', name: 'kwik', version: '0.8'
    implementation group: 'net.luminis.networking', name: 'qpack', version: '1.0'

    testImplementation 'junit:junit:4.12'

    testImplementation("org.assertj:assertj-core:3.11.1")
    testImplementation("org.mockito:mockito-core:2.+")
}

sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated"
        }
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'net.luminis.http3.sample.Flupke'
    }

    doFirst {
        from {
           configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    }
}

task flupkePlugin(type: Jar) {
    manifest {
        attributes 'Main-Class': 'net.luminis.http3.sample.Flupke'
    }
    archiveBaseName = "flupke-plugin"
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') && it.name.contains('qpack') }.collect { zipTree(it) }
    }
}

task determineVersion {
    doLast {
        def proc = "git describe --always --dirty".execute()
        proc.waitFor()
        if (proc.exitValue()) {
            logger.quiet("Building development version.")
        } else {
            def versionTag = proc.in.readLines()[0]
            logger.quiet("Building version ${versionTag}.")

            ext.versionDir = new File("${buildDir}", "generated/net/luminis/http3/impl")
            versionDir.mkdirs()

            new File(versionDir, "version.properties").text = versionTag
        }
    }
}

compileJava.dependsOn (determineVersion, processResources)

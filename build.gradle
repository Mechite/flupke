apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'net.luminis.networking', name: 'kwik', version: '0.8'
    implementation group: 'net.luminis.networking', name: 'qpack', version: '1.0'

    def junitVersion = "5.10.0"
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

    testImplementation("org.assertj:assertj-core:3.24.2")
    testImplementation("org.mockito:mockito-core:5.6.0")
}

sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated"
            exclude 'sources/**'
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'net.luminis.http3.sample.Flupke'
    }

    from {
        configurations.compileClasspath.findAll { it.name =~ /qpack.*\.jar/ }.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task uberJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'net.luminis.http3.sample.Flupke'
    }
    archiveBaseName = "flupke-uber"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.txt'
    with jar
}

task determineVersion {
    doLast {
        def proc = "git describe --always --dirty".execute()
        proc.waitFor()
        if (proc.exitValue()) {
            logger.quiet("Building development version.")
        } else {
            def versionTag = proc.in.readLines()[0]
            // Check that tag matches format like v1.0 or v1.0.19
            if (versionTag ==~ /v?[0-9]+(\.\d+){1,2}/) {
                if (versionTag.startsWith("v")) {
                    versionTag = versionTag[1..-1]
                }
                logger.quiet("Building version ${versionTag}.")
            }
            else {
                logger.error("Version tag '${versionTag}' does not contain a valid version.");
            }
            project.version = versionTag

            ext.versionDir = new File("${buildDir}", "generated/net/luminis/http3/impl")
            versionDir.mkdirs()

            new File(versionDir, "version.properties").text = versionTag
        }
    }
}

compileJava.dependsOn (determineVersion, processResources)

group = 'net.luminis.networking'

java {
    withJavadocJar()
    withSourcesJar()
}

def pomContent = {
    name = 'Flupke'
    description = 'Java implementation of HTTP3 (RFC 9114): generic client / client library and HTTP3 server plugin for Kwik.'
    url = 'https://github.com/ptrd/flupke'

    licenses {
        license {
            name = 'GNU Lesser General Public License v3'
            url = 'https://www.gnu.org/licenses/lgpl-3.0-standalone.html'
        }
    }

    developers {
        developer {
            id = 'peterd'
            name = 'Peter Doornbosch'
            email = 'peter.doornbosch@luminis.eu'
            organization  = 'Luminis'
            organizationUrl = 'https://www.luminis.eu'
        }
    }

    scm {
        connection = 'scm:git:git@github.com:ptrd/flupke.git'
        developerConnection = 'scm:git:git@github.com:ptrd/flupke.git'
        url = 'https://github.com/ptrd/flupke'
    }
}

publishing {
    publications {
        flupke(MavenPublication) {
            artifactId = 'flupke'
            from components.java
            pom pomContent
        }
    }
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.properties.ossrhUsername
                password = project.properties.ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.flupke
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption('html5', true)
}
